/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as AuthUsersRouteImport } from './routes/_auth/users'
import { Route as AuthDashboardRouteImport } from './routes/_auth/dashboard'
import { Route as AuthContactsRouteImport } from './routes/_auth/contacts'

const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthUsersRoute = AuthUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AuthRoute,
} as any)
const AuthDashboardRoute = AuthDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)
const AuthContactsRoute = AuthContactsRouteImport.update({
  id: '/contacts',
  path: '/contacts',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/contacts': typeof AuthContactsRoute
  '/dashboard': typeof AuthDashboardRoute
  '/users': typeof AuthUsersRoute
  '/login': typeof LoginIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/contacts': typeof AuthContactsRoute
  '/dashboard': typeof AuthDashboardRoute
  '/users': typeof AuthUsersRoute
  '/login': typeof LoginIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_auth/contacts': typeof AuthContactsRoute
  '/_auth/dashboard': typeof AuthDashboardRoute
  '/_auth/users': typeof AuthUsersRoute
  '/login/': typeof LoginIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/contacts' | '/dashboard' | '/users' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/contacts' | '/dashboard' | '/users' | '/login'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_auth/contacts'
    | '/_auth/dashboard'
    | '/_auth/users'
    | '/login/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  LoginIndexRoute: typeof LoginIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/users': {
      id: '/_auth/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthUsersRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/contacts': {
      id: '/_auth/contacts'
      path: '/contacts'
      fullPath: '/contacts'
      preLoaderRoute: typeof AuthContactsRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthContactsRoute: typeof AuthContactsRoute
  AuthDashboardRoute: typeof AuthDashboardRoute
  AuthUsersRoute: typeof AuthUsersRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthContactsRoute: AuthContactsRoute,
  AuthDashboardRoute: AuthDashboardRoute,
  AuthUsersRoute: AuthUsersRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  LoginIndexRoute: LoginIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
